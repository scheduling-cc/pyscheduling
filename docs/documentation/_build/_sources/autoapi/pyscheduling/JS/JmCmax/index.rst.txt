:py:mod:`pyscheduling.JS.JmCmax`
================================

.. py:module:: pyscheduling.JS.JmCmax


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.JS.JmCmax.JmCmax_Instance
   pyscheduling.JS.JmCmax.ExactSolvers
   pyscheduling.JS.JmCmax.CSP
   pyscheduling.JS.JmCmax.ListHeuristic
   pyscheduling.JS.JmCmax.ShiftingBottleneck




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyscheduling.JS.JmCmax.DOCPLEX_IMPORTED


.. py:data:: DOCPLEX_IMPORTED
   

   

.. py:class:: JmCmax_Instance(n: int, m: int, name: str = 'Unknown', **kwargs)

   Bases: :py:obj:`pyscheduling.JS.JobShop.JobShopInstance`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: P
      :annotation: :List[List[Tuple[int, int]]]

      

   .. py:attribute:: constraints
      :annotation: :ClassVar[List[pyscheduling.JS.JobShop.Constraints]]

      

   .. py:attribute:: objective
      :annotation: :ClassVar[pyscheduling.Problem.Objective]

      

   .. py:method:: init_sol_method()
      :property:



.. py:class:: ExactSolvers


.. py:class:: CSP

   .. py:class:: MyCallback(stop_times=[300, 600, 3600, 7200])

      Bases: :py:obj:`docplex.cp.solver.cpo_callback.CpoCallback`

      A callback used to log the value of cmax at different timestamps

      :param CpoCallback: Inherits from CpoCallback
      :type CpoCallback: _type_

      .. py:method:: invoke(solver, event, jsol)

         Notify the callback about a solver event.

         This method is called every time an event is notified by the CPO solver.
         Associated to the event, the solver information is provided as a an object of class
         class:`~docplex.cp.solution.CpoSolveResult` that is instantiated with information available at this step.

         :param solver: Originator CPO solver (object of class :class:`~docplex.cp.solver.solver.CpoSolver`)
         :param event: Event id, string with value in ALL_CALLBACK_EVENTS
         :param sres: Solver data, object of class :class:`~docplex.cp.solution.CpoSolveResult`



   .. py:attribute:: CPO_STATUS
      

      

   .. py:method:: _transform_csp_solution(msol, M_k, types_k, instance)
      :staticmethod:

      Transforms cp optimizer interval variable into a solution

      :param msol (): CPO solution
      :param M_k: Interval variables represening jobs inside machines k
      :type M_k: list[list[interval_var]]
      :param types_k: List of job ids inside each machine k
      :type types_k: list[int]
      :param instance: instance corresponding to the solution
      :type instance: RmSijkCmax_Instance

      :returns: cpoptimizer's solution
      :rtype: JobShopSolution


   .. py:method:: solve(instance, **kwargs)
      :staticmethod:

      Returns the solution using the Cplex - CP optimizer solver

      :param instance: Instance object to solve
      :type instance: Instance
      :param log_path: Path to the log file to output cp optimizer log. Defaults to None to disable logging.
      :type log_path: str, optional
      :param time_limit: Time limit for executing the solver. Defaults to 300s.
      :type time_limit: int, optional
      :param threads: Number of threads to set for cp optimizer solver. Defaults to 1.
      :type threads: int, optional

      :returns: The object represeting the solving process result
      :rtype: SolveResult



.. py:class:: ListHeuristic

   Bases: :py:obj:`pyscheduling.core.base_solvers.BaseSolver`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: rule_number
      :annotation: :int = 1

      

   .. py:attribute:: reverse
      :annotation: :bool = False

      

   .. py:method:: solve(instance: JmCmax_Instance) -> pyscheduling.Problem.SolveResult

      contains a list of static dispatching rules to be chosen from

      :param instance: Instance to be solved
      :type instance: JmCmax_Instance
      :param rule_number: Index of the rule to use. Defaults to 1.
      :type rule_number: int, optional

      :returns: SolveResult of the instance by the method
      :rtype: RootProblem.SolveResult



.. py:class:: ShiftingBottleneck

   Bases: :py:obj:`pyscheduling.core.base_solvers.BaseSolver`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: solve(instance: JmCmax_Instance)

      Shifting bottleneck heuristic, Pinedo page 193

      :param instance: Instance to be solved
      :type instance: JmCmax_Instance

      :returns: SolveResult of the instance by the method
      :rtype: RootProblem.SolveResult



