:py:mod:`pyscheduling.SMSP.sijwiTi`
===================================

.. py:module:: pyscheduling.SMSP.sijwiTi


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.SMSP.sijwiTi.sijwiTi_Instance
   pyscheduling.SMSP.sijwiTi.ACTS




.. py:class:: sijwiTi_Instance(n: int, name: str = 'Unknown', **kwargs)

   Bases: :py:obj:`pyscheduling.SMSP.SingleMachine.SingleInstance`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: P
      :annotation: :List[int]

      

   .. py:attribute:: W
      :annotation: :List[int]

      

   .. py:attribute:: D
      :annotation: :List[int]

      

   .. py:attribute:: S
      :annotation: :List[List[int]]

      

   .. py:attribute:: constraints
      :annotation: :ClassVar[List[pyscheduling.SMSP.SingleMachine.Constraints]]

      

   .. py:attribute:: objective
      :annotation: :ClassVar[pyscheduling.Problem.Objective]

      

   .. py:method:: init_sol_method()
      :property:



.. py:class:: ACTS

   Bases: :py:obj:`pyscheduling.core.base_solvers.BaseSolver`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: solve(instance: sijwiTi_Instance)

      Appearant Cost Tardiness with Setup

      :param instance: Instance to be solved
      :type instance: sijwiTi_Instance

      :returns: SolveResult of the instance by the method
      :rtype: RootProblem.SolveResult


   .. py:method:: ACTS_Sorting(instance: sijwiTi_Instance, remaining_jobs: List[int], t: int, prev_job: int)

      Returns the prev_job and the job to be scheduled next based on ACTS rule.
      It returns a couple of previous job scheduled and the new job to be scheduled. The previous job will be the
      same than the taken job if it's the first time when the rule is applied, is the same prev_job passed as
      argument to the function otherwise. This is to avoid extra-ifs and thus not slowing the execution of
      the heuristic

      :param instance: Instance to be solved
      :type instance: sijwiTi_Instance
      :param remaining_jobs: list of remaining jobs id on which the rule will be applied
      :type remaining_jobs: list[int]
      :param t: the current time
      :type t: int
      :param prev_job: last scheduled job id
      :type prev_job: int

      :returns: previous job scheduled, taken job to be scheduled
      :rtype: int, int


   .. py:method:: ACTS_Tuning(instance: sijwiTi_Instance)

      Analyze the instance to consequently tune the ACTS. For now, the tuning is static.

      :param instance: Instance tackled by ACTS heuristic
      :type instance: sijwiTi_Instance

      :returns: K1 , K2
      :rtype: int, int



