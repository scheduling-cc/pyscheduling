:py:mod:`pyscheduling.SMSP.SM_Methods`
======================================

.. py:module:: pyscheduling.SMSP.SM_Methods


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.SMSP.SM_Methods.Metaheuristics
   pyscheduling.SMSP.SM_Methods.CSP
   pyscheduling.SMSP.SM_Methods.ExactSolvers
   pyscheduling.SMSP.SM_Methods.Heuristics_HelperFunctions
   pyscheduling.SMSP.SM_Methods.Heuristics_Cmax




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyscheduling.SMSP.SM_Methods.DOCPLEX_IMPORTED


.. py:data:: DOCPLEX_IMPORTED
   

   

.. py:class:: Metaheuristics

   .. py:method:: lahc(instance: pyscheduling.SMSP.SingleMachine.SingleInstance, **kwargs)
      :staticmethod:

      Returns the solution using the LAHC algorithm

      :param instance: Instance object to solve
      :type instance: SingleMachine.SingleInstance
      :param Lfa: Size of the candidates list. Defaults to 25.
      :type Lfa: int, optional
      :param n_iterations: Number of iterations of LAHC. Defaults to 300.
      :type n_iterations: int, optional
      :param Non_improv: LAHC stops when the number of iterations without improvement is achieved. Defaults to 50.
      :type Non_improv: int, optional
      :param LS: Flag to apply local search at each iteration or not. Defaults to True.
      :type LS: bool, optional
      :param time_limit_factor: Fixes a time limit as follows: n*m*time_limit_factor if specified, else n_iterations is taken Defaults to None
      :param init_sol_method: The method used to get the initial solution. Defaults to "WSECi"
      :param seed: Seed for the random operators to make the algo deterministic
      :type seed: int, optional

      :returns: the solver result of the execution of the metaheuristic
      :rtype: Problem.SolveResult


   .. py:method:: all_methods()
      :classmethod:

      returns all the methods of the given Heuristics class

      :returns: list of functions
      :rtype: list[object]



.. py:class:: CSP

   .. py:class:: MyCallback(stop_times=[300, 600, 3600, 7200])

      Bases: :py:obj:`docplex.cp.solver.cpo_callback.CpoCallback`

      CPO callback allows to be warned directly by the solver engine about different solving steps.

      This class is an 'abstract' class that must be extended by actual listener implementation.
      All method of this class are empty.

      *New in version 2.10.*

      .. py:method:: invoke(solver, event, jsol)

         Notify the callback about a solver event.

         This method is called every time an event is notified by the CPO solver.
         Associated to the event, the solver information is provided as a an object of class
         class:`~docplex.cp.solution.CpoSolveResult` that is instantiated with information available at this step.

         :param solver: Originator CPO solver (object of class :class:`~docplex.cp.solver.solver.CpoSolver`)
         :param event: Event id, string with value in ALL_CALLBACK_EVENTS
         :param sres: Solver data, object of class :class:`~docplex.cp.solution.CpoSolveResult`



   .. py:attribute:: CPO_STATUS
      

      

   .. py:method:: _csp_transform_solution(msol, E_i, instance, objective: pyscheduling.Problem.Objective)
      :staticmethod:


   .. py:method:: solve(instance, **kwargs)
      :staticmethod:

      Returns the solution using the Cplex - CP optimizer solver

      :param instance: Instance object to solve
      :type instance: Instance
      :param objective: The objective to optimize. Defaults to wiCi
      :type objective: str
      :param log_path: Path to the log file to output cp optimizer log. Defaults to None to disable logging.
      :type log_path: str, optional
      :param time_limit: Time limit for executing the solver. Defaults to 300s.
      :type time_limit: int, optional
      :param threads: Number of threads to set for cp optimizer solver. Defaults to 1.
      :type threads: int, optional

      :returns: The object represeting the solving process result
      :rtype: SolveResult



.. py:class:: ExactSolvers


.. py:class:: Heuristics_HelperFunctions

   .. py:method:: rule_candidate(remaining_jobs: list[int], rule: object, reverse: bool = True)
      :staticmethod:

      Extract the highest index job using the specific passed rule.

      :param remaining_jobs: The list of jobs on which we apply the rule
      :type remaining_jobs: list[int]
      :param rule: The rule (function) which is used in the heuristic in order to extract the candidate job
      :type rule: object
      :param reverse: When true, the candidate returned is the job with the highest value returned by the rule.
      :type reverse: bool, optional
      :param When false:
      :param returns the job with the lowest value returned by the rule. Defaults to True.:

      :returns: returns the job candidate by the given rule from remaining_jobs
      :rtype: int



.. py:class:: Heuristics_Cmax

   .. py:method:: meta_raps(instance: pyscheduling.SMSP.SingleMachine.SingleInstance, p: float, r: int, nb_exec: int)
      :staticmethod:

      Returns the solution using the meta-raps algorithm

      :param instance: The instance to be solved by the heuristic
      :type instance: SingleInstance
      :param p: probability of taking the greedy best solution
      :type p: float
      :param r: percentage of moves to consider to select the best move
      :type r: int
      :param nb_exec: Number of execution of the heuristic
      :type nb_exec: int

      :returns: the solver result of the execution of the heuristic
      :rtype: Problem.SolveResult


   .. py:method:: grasp(instance: pyscheduling.SMSP.SingleMachine.SingleInstance, x, nb_exec: int)
      :staticmethod:

      Returns the solution using the grasp algorithm

      :param instance: Instance to be solved by the heuristic
      :type instance: SingleInstance
      :param x: percentage of moves to consider to select the best move
      :type x: _type_
      :param nb_exec: Number of execution of the heuristic
      :type nb_exec: int

      :returns: the solver result of the execution of the heuristic
      :rtype: Problem.SolveResult



