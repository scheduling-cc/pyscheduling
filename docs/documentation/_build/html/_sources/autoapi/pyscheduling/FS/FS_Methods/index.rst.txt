:py:mod:`pyscheduling.FS.FS_Methods`
====================================

.. py:module:: pyscheduling.FS.FS_Methods


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.FS.FS_Methods.Heuristics_Cmax
   pyscheduling.FS.FS_Methods.CSP
   pyscheduling.FS.FS_Methods.ExactSolvers




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyscheduling.FS.FS_Methods.DOCPLEX_IMPORTED


.. py:data:: DOCPLEX_IMPORTED
   

   

.. py:class:: Heuristics_Cmax

   .. py:method:: MINIT()

      Gupta's MINIT heuristic which is based on iteratively scheduling a new job at the end
      so that it minimizes the idle time at the last machine

      :param instance: Instance to be solved
      :type instance: FlowShop.FlowShopInstance

      :returns: SolveResult of the instance by the method
      :rtype: RootProblem.SolveResult



.. py:class:: CSP

   .. py:class:: MyCallback(stop_times=[300, 600, 3600, 7200])

      Bases: :py:obj:`docplex.cp.solver.cpo_callback.CpoCallback`

      CPO callback allows to be warned directly by the solver engine about different solving steps.

      This class is an 'abstract' class that must be extended by actual listener implementation.
      All method of this class are empty.

      *New in version 2.10.*

      .. py:method:: invoke(solver, event, jsol)

         Notify the callback about a solver event.

         This method is called every time an event is notified by the CPO solver.
         Associated to the event, the solver information is provided as a an object of class
         class:`~docplex.cp.solution.CpoSolveResult` that is instantiated with information available at this step.

         :param solver: Originator CPO solver (object of class :class:`~docplex.cp.solver.solver.CpoSolver`)
         :param event: Event id, string with value in ALL_CALLBACK_EVENTS
         :param sres: Solver data, object of class :class:`~docplex.cp.solution.CpoSolveResult`



   .. py:attribute:: CPO_STATUS
      

      

   .. py:method:: _csp_transform_solution(msol, E_i, instance: pyscheduling.FS.FlowShop.FlowShopInstance)
      :staticmethod:


   .. py:method:: solve(instance, **kwargs)
      :staticmethod:

      Returns the solution using the Cplex - CP optimizer solver

      :param instance: Instance object to solve
      :type instance: Instance
      :param objective: The objective to optimize. Defaults to wiCi
      :type objective: str
      :param log_path: Path to the log file to output cp optimizer log. Defaults to None to disable logging.
      :type log_path: str, optional
      :param time_limit: Time limit for executing the solver. Defaults to 300s.
      :type time_limit: int, optional
      :param threads: Number of threads to set for cp optimizer solver. Defaults to 1.
      :type threads: int, optional

      :returns: The object represeting the solving process result
      :rtype: SolveResult



.. py:class:: ExactSolvers


