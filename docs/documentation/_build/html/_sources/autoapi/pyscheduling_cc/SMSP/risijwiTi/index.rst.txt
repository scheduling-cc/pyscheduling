:py:mod:`pyscheduling_cc.SMSP.risijwiTi`
========================================

.. py:module:: pyscheduling_cc.SMSP.risijwiTi


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling_cc.SMSP.risijwiTi.risijwiTi_Instance
   pyscheduling_cc.SMSP.risijwiTi.Heuristics
   pyscheduling_cc.SMSP.risijwiTi.Metaheuristics
   pyscheduling_cc.SMSP.risijwiTi.Heuristics_HelperFunctions




.. py:class:: risijwiTi_Instance

   Bases: :py:obj:`pyscheduling_cc.SMSP.SingleMachine.SingleInstance`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: W
      :annotation: :list[int]

      

   .. py:attribute:: P
      :annotation: :list[int]

      

   .. py:attribute:: R
      :annotation: :list[int]

      

   .. py:attribute:: D
      :annotation: :list[int]

      

   .. py:attribute:: S
      :annotation: :list[list[int]]

      

   .. py:method:: read_txt(path: pathlib.Path)
      :classmethod:

      Read an instance from a txt file according to the problem's format

      :param path: path to the txt file of type Path from the pathlib module
      :type path: Path

      :raises FileNotFoundError: when the file does not exist

      :rtype: risijwiTi_Instance


   .. py:method:: generate_random(jobs_number: int, protocol: pyscheduling_cc.SMSP.SingleMachine.GenerationProtocol = SingleMachine.GenerationProtocol.BASE, law: pyscheduling_cc.SMSP.SingleMachine.GenerationLaw = SingleMachine.GenerationLaw.UNIFORM, Wmin: int = 1, Wmax: int = 1, Pmin: int = 1, Pmax: int = -1, alpha: float = 0.0, due_time_factor: float = 0.0, Gamma: float = 0.0, Smin: int = -1, Smax: int = -1, InstanceName: str = '')
      :classmethod:

      Random generation of risijwiTi problem instance

      :param jobs_number: number of jobs of the instance
      :type jobs_number: int
      :param protocol: given protocol of generation of random instances. Defaults to SingleMachine.GenerationProtocol.VALLADA.
      :type protocol: SingleMachine.GenerationProtocol, optional
      :param law: probablistic law of generation. Defaults to SingleMachine.GenerationLaw.UNIFORM.
      :type law: SingleMachine.GenerationLaw, optional
      :param Wmin: Minimal weight. Defaults to 1.
      :type Wmin: int, optional
      :param Wmax: Maximal weight. Defaults to 1.
      :type Wmax: int, optional
      :param Pmin: Minimal processing time. Defaults to -1.
      :type Pmin: int, optional
      :param Pmax: Maximal processing time. Defaults to -1.
      :type Pmax: int, optional
      :param alpha: Release time factor. Defaults to 0.0.
      :type alpha: float, optional
      :param due_time_factor: Due time factor. Defaults to 0.0.
      :type due_time_factor: float, optional
      :param Gamma: Setup time factor. Defaults to 0.0.
      :type Gamma: float, optional
      :param Smin: Minimal setup time. Defaults to -1.
      :type Smin: int, optional
      :param Smax: Maximal setup time. Defaults to -1.
      :type Smax: int, optional
      :param InstanceName: name to give to the instance. Defaults to "".
      :type InstanceName: str, optional

      :returns: the randomly generated instance
      :rtype: risijwiTi_Instance


   .. py:method:: to_txt(path: pathlib.Path) -> None

      Export an instance to a txt file

      :param path: path to the resulting txt file
      :type path: Path


   .. py:method:: get_objective()

      to get the objective tackled by the instance

      :returns: Total wighted lateness
      :rtype: RootProblem.Objective


   .. py:method:: init_sol_method()

      Returns the default solving method

      :returns: default solving method
      :rtype: object



.. py:class:: Heuristics

   .. py:method:: ACTS_WSECi(instance: risijwiTi_Instance)
      :staticmethod:

      Appearant Tardiness Cost with Setup heuristic using WSECi rule instead of WSPT

      :param instance: Instance to be solved
      :type instance: risijwiTi_Instance

      :returns: Solve Result of the instance by the method
      :rtype: RootProblem.SolveResult


   .. py:method:: all_methods()
      :classmethod:

      returns all the methods of the given Heuristics class

      :returns: list of functions
      :rtype: list[object]



.. py:class:: Metaheuristics

   Bases: :py:obj:`pyscheduling_cc.SMSP.SM_Methods.Metaheuristics`

   .. py:method:: all_methods()
      :classmethod:

      returns all the methods of the given Heuristics class

      :returns: list of functions
      :rtype: list[object]



.. py:class:: Heuristics_HelperFunctions

   .. py:method:: ACTS_WSECi_Sorting(instance: risijwiTi_Instance, remaining_jobs: list[pyscheduling_cc.SMSP.SingleMachine.Job], t: int, prev_job: int)
      :staticmethod:

      Returns the prev_job and the job to be scheduled next based on ACTS_WSECi rule.
      It returns a couple of previous job scheduled and the new job to be scheduled. The previous job will be the
      same than the taken job if it's the first time when the rule is applied, is the same prev_job passed as
      argument to the function otherwise. This is to avoid extra-ifs and thus not slowing the execution of
      the heuristic

      :param instance: Instance tackled by the ACTS_WSECi heuristic
      :type instance: risijwiTi_Instance
      :param remaining_jobs: Remaining jobs list to be scheduled
      :type remaining_jobs: list[SingleMachine.Job]
      :param t: current time
      :type t: int
      :param prev_job: Previous scheduled job, necessary for setup time
      :type prev_job: int

      :returns: previous job scheduled, taken job to be scheduled
      :rtype: int, int


   .. py:method:: ACTS_WSECi_Tuning(instance: risijwiTi_Instance)
      :staticmethod:

      Analyze the instance to consequently tune the ACTS_WSECi. For now, the tuning is static.

      :param instance: Instance tackled by ACTS_WSECi heuristic
      :type instance: risijwiTi_Instance

      :returns: K1 , K2
      :rtype: int, int



