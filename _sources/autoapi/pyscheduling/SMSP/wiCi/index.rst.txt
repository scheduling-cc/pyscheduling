:py:mod:`pyscheduling.SMSP.wiCi`
================================

.. py:module:: pyscheduling.SMSP.wiCi


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.SMSP.wiCi.wiCi_Instance
   pyscheduling.SMSP.wiCi.WSPT




.. py:class:: wiCi_Instance(n: int, name: str = 'Unknown', **kwargs)

   Bases: :py:obj:`pyscheduling.SMSP.SingleMachine.SingleInstance`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: P
      :annotation: :List[int]

      

   .. py:attribute:: W
      :annotation: :List[int]

      

   .. py:attribute:: constraints
      :annotation: :ClassVar[List[pyscheduling.SMSP.SingleMachine.Constraints]]

      

   .. py:attribute:: objective
      :annotation: :ClassVar[pyscheduling.Problem.Objective]

      

   .. py:method:: init_sol_method()
      :property:



.. py:class:: WSPT

   Bases: :py:obj:`pyscheduling.core.base_solvers.BaseSolver`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: solve(instance: wiCi_Instance)

      Weighted Shortest Processing Time is Optimal for wiCi problem. A proof by contradiction can simply be found
      by performing an adjacent jobs interchange

      :param instance: Instance to be solved
      :type instance: wiCi_Instance

      :returns: SolveResult of the instance by the method.
      :rtype: RootProblem.SolveResult



