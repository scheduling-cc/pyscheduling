:py:mod:`pyscheduling.PMSP.ParallelMachines`
============================================

.. py:module:: pyscheduling.PMSP.ParallelMachines


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.PMSP.ParallelMachines.GenerationProtocol
   pyscheduling.PMSP.ParallelMachines.ParallelInstance
   pyscheduling.PMSP.ParallelMachines.Machine
   pyscheduling.PMSP.ParallelMachines.ParallelSolution
   pyscheduling.PMSP.ParallelMachines.PM_LocalSearch
   pyscheduling.PMSP.ParallelMachines.NeighbourhoodGeneration




.. py:class:: GenerationProtocol

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: BASE
      :annotation: = 1

      

   .. py:attribute:: VALLADA
      :annotation: = 2

      


.. py:class:: ParallelInstance(n: int, m: int, name: str = 'Unknown', **kwargs)

   Bases: :py:obj:`pyscheduling.Problem.BaseInstance`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: n
      :annotation: :int

      

   .. py:attribute:: m
      :annotation: :int

      


.. py:class:: Machine(machine_num: int, **kwargs)

   Bases: :py:obj:`pyscheduling.SMSP.SingleMachine.Machine`

   .. py:attribute:: machine_num
      :annotation: :int = 0

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: copy()


   .. py:method:: compute_current_ci(instance: ParallelInstance, prev_ci: int, job_prev_i: int, job_i: int)

      Computes the current ci when job_i comes after job_prev_i.
      This takes into account if we have setup times and release dates.

      :param instance: the instance to be solved.
      :type instance: SingelInstance
      :param prev_ci: the previous value of ci
      :type prev_ci: int
      :param job_prev_i: id of the job that precedes the inserted job
      :type job_prev_i: int
      :param job_i: id of the job to be inserted at the end
      :type job_i: int

      :returns: (ci, start_time), the new completion time and start_time of the inserted job.
      :rtype: tuple



.. py:class:: ParallelSolution(instance: ParallelInstance = None, machines: List[Machine] = None, objective_value: int = 0)

   Bases: :py:obj:`pyscheduling.Problem.BaseSolution`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: machines
      :annotation: :List[Machine]

      

   .. py:attribute:: max_objectives
      

      

   .. py:attribute:: sum_objectives
      

      

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: copy()

      Return a copy to the current solution

      :returns: copy of the current solution
      :rtype: Solution


   .. py:method:: __lt__(other)

      Return self<value.


   .. py:method:: tmp_objective(tmp_obj=None)

      returns the temporary objective_value of a solution according to the the machines objectives from the dict temp_obj if present,
      if not it takes the objective_value of the machine, this doesn't modify the "cmax" of the machine.

      :param temp_obj: temporary objectives for each machine, machine_num: tmp_obj. Defaults to None.
      :type temp_obj: dict, optional

      :returns: tmp_obj
      :rtype: int


   .. py:method:: fix_objective()

      Sets the objective_value of the solution to the correct value
      according to the objective_values of the machines (without computing them)


   .. py:method:: compute_objective(instance)

      Computes the current solution's objective.
      By calling the compute objective on each machine.


   .. py:method:: fix_solution()


   .. py:method:: read_txt(path: pathlib.Path)
      :classmethod:

      Read a solution from a txt file

      :param path: path to the solution's txt file of type Path from pathlib
      :type path: Path

      :rtype: RmSijkCmax_Solution


   .. py:method:: to_txt(path: pathlib.Path) -> None

      Export the solution to a txt file

      :param path: path to the resulting txt file
      :type path: Path


   .. py:method:: plot(path: pathlib.Path = None)

      Plot the solution into a gantt diagramm

      :param types: The type of tasks to plot, a string where each letter corresponds to one type: R for release,

                    S for setup and P for Processing. Defaults to "RSP".
      :type types: str, optional
      :param path: The path to export the diagram, if not specified it is not exported but shown inline. Defaults to None.
      :type path: Path, optional


   .. py:method:: is_valid()

      # Check if solution respects the constraints



.. py:class:: PM_LocalSearch(methods: List[object] = None, copy_solution: bool = False)

   Bases: :py:obj:`pyscheduling.Problem.LocalSearch`

   .. py:method:: _external_insertion(solution: ParallelSolution)
      :staticmethod:

      Delete a job from the machine whose completion_time is maximal and insert it on another one

      :param solution: The initial solution to be improved
      :type solution: ParallelSolution

      :returns: Improved solution
      :rtype: ParallelSolution


   .. py:method:: _external_swap(solution: ParallelSolution)
      :staticmethod:

      Swap between 2 jobs on different machines, where one of the machines has the maximal completion_time among all

      :param solution: The initial solution to be improved
      :type solution: ParallelSolution

      :returns: Improved solution
      :rtype: ParallelSolution


   .. py:method:: _internal_swap(solution: ParallelSolution)
      :staticmethod:

      Swap between 2 jobs on the same machine whose completion_time is maximal if it gives a better solution

      :param solution: The initial solution to be improved
      :type solution: ParallelSolution

      :returns: Improved solution
      :rtype: ParallelSolution


   .. py:method:: _inter_machine_insertion(solution: ParallelSolution)
      :staticmethod:

      For every job, verify if rescheduling it on the same machine at a different position or on a whole different machines gives a better solution

      :param solution: The initial solution to be improved
      :type solution: ParallelSolution

      :returns: Improved solution
      :rtype: ParallelSolution


   .. py:method:: _balance(solution: ParallelSolution)
      :staticmethod:

      Reschedule jobs between machines in order to balance their completion_time thus giving a better solution

      :param solution: The initial solution to be improved
      :type solution: ParallelSolution

      :returns: Improved solution
      :rtype: ParallelSolution


   .. py:method:: best_insertion_machine(solution: ParallelSolution, machine_id: int, job_id: int)
      :staticmethod:

      Find the best position to insert a job job_id in the machine machine_id

      :param solution: Solution to be improved
      :type solution: ParallelSolution
      :param machine_id: ID of the machine
      :type machine_id: int
      :param job_id: ID of the job
      :type job_id: int

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: get_bottleneck_machines(solution: ParallelSolution)
      :staticmethod:

      Gets the list of machines that are bottlneck and a list of the remaining machines.
          For the case where the bottlneck is not defined (no max aggregation):
          half of the machines with the largest objective values is returned as bottlneck.

      :param solution: problem solution
      :type solution: ParallelSolution



.. py:class:: NeighbourhoodGeneration

   .. py:method:: random_swap(solution: ParallelSolution, force_improve: bool = True, internal: bool = False)
      :staticmethod:

      Performs a random swap between 2 jobs on the same machine or on different machines

      :param solution: Solution to be improved
      :type solution: ParallelSolution
      :param force_improve: If true, to apply the move, it must improve the solution. Defaults to True.
      :type force_improve: bool, optional
      :param internal: If true, applies the swap between jobs on the same machine only. Defaults to False.
      :type internal: bool, optional

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: random_inter_machine_insertion(solution: ParallelSolution, force_improve: bool = True)
      :staticmethod:

      Removes randomly a job from a machine and insert it on the same machine in different possition or another machine

      :param solution: Solution to be improved
      :type solution: ParallelSolution
      :param force_improve: If true, to apply the move, it must improve the solution. Defaults to True.
      :type force_improve: bool, optional

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: restricted_swap(solution: ParallelSolution)
      :staticmethod:

      Performs a random swap between 2 jobs of 2 different machines whose completion time is equal
      to the maximal completion time. If it's not possible, performs the move between a job on
      the machine whose completion time is equel to the maximal completion time and another
      one

      :param solution: Solution to be improved
      :type solution: ParallelSolution

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: restricted_insert(solution: ParallelSolution)
      :staticmethod:

      Performs a random inter_machine_insertion between 2 different machines whose
      completion time is equal to the maximal completion time. If it's not possible, performs the
      move between a job on the machine whose completion time is equel to the
      maximal completion time and another one

      :param solution: Solution to be improved
      :type solution: ParallelSolution

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: lahc_neighbour(solution_i)
      :staticmethod:

      Generates a neighbour solution of the given solution for the lahc metaheuristic

      :param solution_i: Solution to be improved
      :type solution_i: ParallelSolution

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: SA_neighbour(solution: ParallelSolution)
      :staticmethod:

      Generates a neighbour solution of the given solution for the SA metaheuristic

      :param solution_i: Solution to be improved
      :type solution_i: ParallelSolution

      :returns: New solution
      :rtype: ParallelSolution


   .. py:method:: RSA_neighbour(solution: ParallelInstance, q0: float = 0.5)
      :staticmethod:

      Generates a neighbour solution of the given solution for the lahc metaheuristic

      :param solution_i: Solution to be improved
      :type solution_i: ParallelSolution
      :param q0: Probability to apply restricted swap compared to
      :type q0: float
      :param restricted insertion.:

      :returns: New solution
      :rtype: ParallelSolution



