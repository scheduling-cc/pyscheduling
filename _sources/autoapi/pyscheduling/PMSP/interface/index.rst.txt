:py:mod:`pyscheduling.PMSP.interface`
=====================================

.. py:module:: pyscheduling.PMSP.interface


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyscheduling.PMSP.interface.Constraints
   pyscheduling.PMSP.interface.Problem




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyscheduling.PMSP.interface.problems


.. py:class:: Constraints

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: W
      :annotation: = weight

      

   .. py:attribute:: R
      :annotation: = release

      

   .. py:attribute:: S
      :annotation: = setup

      

   .. py:attribute:: D
      :annotation: = due

      

   .. py:method:: toString()
      :classmethod:

      Print the available constraints for Single Machine

      :returns: name of every constraint in different lines
      :rtype: str


   .. py:method:: __lt__(other)

      redefine less than operator alphabetically

      :param other: Another constraint
      :type other: Constraints

      :returns: returns the comparison result
      :rtype: bool



.. py:data:: problems
   

   

.. py:class:: Problem

   .. py:attribute:: key
      

      

   .. py:attribute:: instance
      :annotation: :ParallelMachines.ParallelInstance

      

   .. py:attribute:: constraints
      :annotation: :list[Constraints]

      

   .. py:attribute:: objective
      :annotation: :pyscheduling.Problem.Objective

      

   .. py:attribute:: heuristics
      

      

   .. py:attribute:: metaheuristics
      

      

   .. py:method:: set_key()

      set the key attribute of the problem instance based on objective and constraints attributes
      as described in problems global dict


   .. py:method:: generate_random(**data)

      Generate randomly the instance attribute along with its corresponding heuristics and metaheuristics

      :raises TypeError: In case the key is None, it means the user didnt add constraints or an objective


   .. py:method:: read_txt(path: pathlib.Path)

      Read the instance attribute from a text file corresponding to the right input format of the instance type

      :param path: path of the instance file to be read
      :type path: Path

      :raises TypeError: In case the key is None, it means the user didnt add constraints or an objective


   .. py:method:: add_constraints(constraints)

      Adds constraints to the attribute constraints

      :param constraints: can be a single Constraints type object or a list of Constraints type objects
      :type constraints: object

      :raises TypeError: If one of the constraints list element is not a Constraints type object
      :raises TypeError: If the constraints object is not a Constraints type object


   .. py:method:: remove_constraint(constraint: Constraints)

      to remove a constraint from constraints attribute

      :param constraint: constraint to be removed
      :type constraint: Constraints

      :raises TypeError: In case the argument is not of Constraints type


   .. py:method:: set_objective(objective: pyscheduling.Problem.Objective)

      set the objective attribute

      :param objective: chosen objective
      :type objective: Objective

      :raises TypeError: In case the argument passed is not of Objective type
      :raises TypeError: In case Lateness as wanted objective but due dates are not in constraints attribute


   .. py:method:: solve(method: object, **data)

      call the method passed as an argument to solve the instance attribute

      :param method: callable method to solve the instance attribute, can be in the heuristics or metaheuristics list or an user-created method
      :type method: object

      :raises ValueError: The method argument is not a callable
      :raises TypeError: In case the method is not properly used

      :returns: SolveResult of the instance by the method
      :rtype: RootProblem.SolveResult



