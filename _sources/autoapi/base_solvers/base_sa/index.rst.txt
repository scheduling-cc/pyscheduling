:py:mod:`base_solvers.base_sa`
==============================

.. py:module:: base_solvers.base_sa


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   base_solvers.base_sa.BaseSA




.. py:class:: BaseSA

   Bases: :py:obj:`pyscheduling.core.base_solvers.base_solver.BaseSolver`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:attribute:: ls_procedure
      :annotation: :pyscheduling.Problem.LocalSearch

      

   .. py:attribute:: generate_neighbour
      :annotation: :Callable

      

   .. py:attribute:: time_limit_factor
      :annotation: :float

      

   .. py:attribute:: init_sol_method
      :annotation: :pyscheduling.core.base_solvers.base_solver.BaseSolver

      

   .. py:attribute:: init_temp
      :annotation: :float

      

   .. py:attribute:: final_temp
      :annotation: :float

      

   .. py:attribute:: k
      :annotation: :float

      

   .. py:attribute:: cooling_factor
      :annotation: :float

      

   .. py:attribute:: n_iterations
      :annotation: :int

      

   .. py:attribute:: non_improv
      :annotation: :int

      

   .. py:attribute:: use_local_search
      :annotation: :bool

      

   .. py:attribute:: random_seed
      :annotation: :int

      

   .. py:method:: solve(instance: pyscheduling.Problem.BaseInstance)

      Returns the solution using the simulated annealing algorithm or the restricted simulated annealing algorithm

      :param instance: Instance object to solve
      :type instance: ParallelInstance

      :returns: the solver result of the execution of the metaheuristic
      :rtype: Problem.SolveResult



